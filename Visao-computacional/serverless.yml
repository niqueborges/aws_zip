service: visao-computacional
frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:logs:*:*:*  # Permissões para logs

    - Effect: Allow
      Action:
        - rekognition:DetectFaces
        - rekognition:DetectLabels
      Resource: "*"  # Permissões para Rekognition

    - Effect: Allow
      Action: s3:GetObject
      Resource: arn:aws:s3:::photogrupo3/*  # Permissões para acessar objetos no S3

    - Effect: Allow
      Action:
        - bedrock:InvokeModel
        - bedrock:ListModels
      Resource: "*"  # Permissões para Bedrock

  environment:
    BUCKET_NAME: "${env:BUCKET_NAME}"  # Nome do bucket S3
    FOLDER_NAME: "${env:FOLDER_NAME}"     # Nome da pasta única

functions:
  visionHealthCheck:
    handler: handlers/lambda_handler.health
    events:
      - httpApi:
          path: /
          method: get

  visionGetDescriptionV1:
    handler: handlers/lambda_handler.v1_description
    events:
      - httpApi:
          path: /v1
          method: get

  visionGetDescriptionV2:
    handler: handlers/lambda_handler.v2_description
    events:
      - httpApi:
          path: /v2
          method: get

  visionDetectFaces:
    handler: handlers/lambda_handler.vision
    events:
      - httpApi:
          path: /v1/vision
          method: post
    timeout: 60  # Timeout para a função

  visionDetectPets:
    handler: handlers/lambda_handler.vision
    events:
      - httpApi:
          path: /v2/vision
          method: post
    timeout: 60  # Timeout para a função

package:
  exclude:
    - node_modules/**
    - tests/**
    - .git/**
    - README.md
    - utils/**

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false
    fileName: ../requirements.txt  # Arquivo de requisitos do Python
