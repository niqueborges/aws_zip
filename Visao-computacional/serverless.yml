service: visao-computacional
frameworkVersion: '4'

provider:
  name: aws
  runtime: python3.9
  region: us-east-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: arn:aws:logs:*:*:*  

    - Effect: Allow
      Action:
        - rekognition:DetectFaces
        - rekognition:DetectLabels
      Resource: "*"

    - Effect: Allow
      Action: s3:GetObject
      Resource: arn:aws:s3:::photogrupo3/*

    - Effect: Allow
      Action:
        - bedrock:InvokeModel
        - bedrock:ListModels
      Resource: "*"

functions:
  visionHealthCheck:
    handler: handlers/lambda_handler.health
    events:
      - httpApi:
          path: /
          method: get

  visionGetDescriptionV1:
    handler: handlers/lambda_handler.v1_description
    events:
      - httpApi:
          path: /v1
          method: get

  visionGetDescriptionV2:
    handler: handlers/lambda_handler.v2_description
    events:
      - httpApi:
          path: /v2
          method: get

  visionDetectFaces:
    handler: handlers/lambda_handler.vision
    events:
      - httpApi:  
          path: /v1/vision
          method: post
    timeout: 60 
    environment:
      BUCKET_NAME: "photogrupo3"
    layers:
      - arn:aws:lambda:us-east-1:891377265245:layer:my-layer:1

  visionDetectPets:
    handler: handlers/lambda_pet.handler_pets
    events:
      - httpApi:
          path: /v2/vision
          method: post  
    timeout: 60
    environment:
      BUCKET_NAME: "photogrupo3v1"
    layers:
      - arn:aws:lambda:us-east-1:891377265245:layer:my-layer:1

plugins:
  - serverless-python-requirements
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false
    fileName: ../requirements.txt  


environment:
  dotenv:
    path: ../.env  
